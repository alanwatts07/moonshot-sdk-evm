/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IMoonShotFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyExactIn"
      | "buyExactOut"
      | "createMoonShotToken"
      | "createMoonShotTokenAndBuy"
      | "sellExactIn"
      | "sellExactOut"
      | "setConfig"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BuyExactIn"
      | "BuyExactOut"
      | "MarketcapReached"
      | "Migrated"
      | "NewMoonShotToken"
      | "NewMoonShotTokenAndBuy"
      | "SellExactIn"
      | "SellExactOut"
      | "SetConfig"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyExactIn",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyExactOut",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMoonShotToken",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createMoonShotTokenAndBuy",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sellExactIn",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellExactOut",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "buyExactIn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMoonShotToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMoonShotTokenAndBuy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
}

export namespace BuyExactInEvent {
  export type InputTuple = [
    buyer: AddressLike,
    token: AddressLike,
    tokenAmount: BigNumberish,
    contractTokenBalance: BigNumberish,
    ethAmount: BigNumberish,
    fee: BigNumberish,
    dexFee: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    token: string,
    tokenAmount: bigint,
    contractTokenBalance: bigint,
    ethAmount: bigint,
    fee: bigint,
    dexFee: bigint
  ];
  export interface OutputObject {
    buyer: string;
    token: string;
    tokenAmount: bigint;
    contractTokenBalance: bigint;
    ethAmount: bigint;
    fee: bigint;
    dexFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuyExactOutEvent {
  export type InputTuple = [
    buyer: AddressLike,
    token: AddressLike,
    tokenAmount: BigNumberish,
    contractTokenBalance: BigNumberish,
    ethAmount: BigNumberish,
    refund: BigNumberish,
    fee: BigNumberish,
    dexFee: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    token: string,
    tokenAmount: bigint,
    contractTokenBalance: bigint,
    ethAmount: bigint,
    refund: bigint,
    fee: bigint,
    dexFee: bigint
  ];
  export interface OutputObject {
    buyer: string;
    token: string;
    tokenAmount: bigint;
    contractTokenBalance: bigint;
    ethAmount: bigint;
    refund: bigint;
    fee: bigint;
    dexFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketcapReachedEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MigratedEvent {
  export type InputTuple = [
    token: AddressLike,
    tokensToMigrate: BigNumberish,
    tokensToBurn: BigNumberish,
    ethToMigrate: BigNumberish,
    migrationFee: BigNumberish,
    pair: AddressLike
  ];
  export type OutputTuple = [
    token: string,
    tokensToMigrate: bigint,
    tokensToBurn: bigint,
    ethToMigrate: bigint,
    migrationFee: bigint,
    pair: string
  ];
  export interface OutputObject {
    token: string;
    tokensToMigrate: bigint;
    tokensToBurn: bigint;
    ethToMigrate: bigint;
    migrationFee: bigint;
    pair: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewMoonShotTokenEvent {
  export type InputTuple = [addr: AddressLike, signature: BytesLike];
  export type OutputTuple = [addr: string, signature: string];
  export interface OutputObject {
    addr: string;
    signature: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NewMoonShotTokenAndBuyEvent {
  export type InputTuple = [
    addr: AddressLike,
    signature: BytesLike,
    tokenAmount: BigNumberish,
    ethAmount: BigNumberish,
    fee: BigNumberish,
    dexFee: BigNumberish
  ];
  export type OutputTuple = [
    addr: string,
    signature: string,
    tokenAmount: bigint,
    ethAmount: bigint,
    fee: bigint,
    dexFee: bigint
  ];
  export interface OutputObject {
    addr: string;
    signature: string;
    tokenAmount: bigint;
    ethAmount: bigint;
    fee: bigint;
    dexFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellExactInEvent {
  export type InputTuple = [
    seller: AddressLike,
    token: AddressLike,
    tokenAmount: BigNumberish,
    contractTokenBalance: BigNumberish,
    ethAmount: BigNumberish,
    fee: BigNumberish,
    dexFee: BigNumberish
  ];
  export type OutputTuple = [
    seller: string,
    token: string,
    tokenAmount: bigint,
    contractTokenBalance: bigint,
    ethAmount: bigint,
    fee: bigint,
    dexFee: bigint
  ];
  export interface OutputObject {
    seller: string;
    token: string;
    tokenAmount: bigint;
    contractTokenBalance: bigint;
    ethAmount: bigint;
    fee: bigint;
    dexFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SellExactOutEvent {
  export type InputTuple = [
    seller: AddressLike,
    token: AddressLike,
    tokenAmount: BigNumberish,
    contractTokenBalance: BigNumberish,
    ethAmount: BigNumberish,
    fee: BigNumberish,
    dexFee: BigNumberish
  ];
  export type OutputTuple = [
    seller: string,
    token: string,
    tokenAmount: bigint,
    contractTokenBalance: bigint,
    ethAmount: bigint,
    fee: bigint,
    dexFee: bigint
  ];
  export interface OutputObject {
    seller: string;
    token: string;
    tokenAmount: bigint;
    contractTokenBalance: bigint;
    ethAmount: bigint;
    fee: bigint;
    dexFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetConfigEvent {
  export type InputTuple = [
    totalSupply: BigNumberish,
    virtualTokenReserves: BigNumberish,
    virtualCollateralReserves: BigNumberish,
    feeBasisPoints: BigNumberish,
    dexFeeBasisPoints: BigNumberish,
    migrationFeeFixed: BigNumberish,
    mcUpperLimit: BigNumberish,
    mcLowerLimit: BigNumberish,
    treasury: AddressLike,
    dexTreasury: AddressLike,
    uniswapV2Router: AddressLike,
    signer: AddressLike
  ];
  export type OutputTuple = [
    totalSupply: bigint,
    virtualTokenReserves: bigint,
    virtualCollateralReserves: bigint,
    feeBasisPoints: bigint,
    dexFeeBasisPoints: bigint,
    migrationFeeFixed: bigint,
    mcUpperLimit: bigint,
    mcLowerLimit: bigint,
    treasury: string,
    dexTreasury: string,
    uniswapV2Router: string,
    signer: string
  ];
  export interface OutputObject {
    totalSupply: bigint;
    virtualTokenReserves: bigint;
    virtualCollateralReserves: bigint;
    feeBasisPoints: bigint;
    dexFeeBasisPoints: bigint;
    migrationFeeFixed: bigint;
    mcUpperLimit: bigint;
    mcLowerLimit: bigint;
    treasury: string;
    dexTreasury: string;
    uniswapV2Router: string;
    signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IMoonShotFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IMoonShotFactory;
  waitForDeployment(): Promise<this>;

  interface: IMoonShotFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyExactIn: TypedContractMethod<
    [_token: AddressLike, _amountOutMin: BigNumberish],
    [void],
    "payable"
  >;

  buyExactOut: TypedContractMethod<
    [
      _token: AddressLike,
      _tokenAmount: BigNumberish,
      _maxCollateralAmount: BigNumberish
    ],
    [void],
    "payable"
  >;

  createMoonShotToken: TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _nonce: BigNumberish,
      _signature: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  createMoonShotTokenAndBuy: TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _nonce: BigNumberish,
      _tokenAmountMin: BigNumberish,
      _signature: BytesLike
    ],
    [string],
    "payable"
  >;

  sellExactIn: TypedContractMethod<
    [
      _token: AddressLike,
      _tokenAmount: BigNumberish,
      _amountCollateralMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  sellExactOut: TypedContractMethod<
    [
      _token: AddressLike,
      _tokenAmountMax: BigNumberish,
      _amountCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setConfig: TypedContractMethod<
    [
      _totalSupply: BigNumberish,
      _virtualTokenReserves: BigNumberish,
      _virtualCollateralReserves: BigNumberish,
      _feeBasisPoints: BigNumberish,
      _dexFeeBasisPoints: BigNumberish,
      _migrationFeeFixed: BigNumberish,
      _mcUpperLimit: BigNumberish,
      _mcLowerLimit: BigNumberish,
      _treasury: AddressLike,
      _dexTreasury: AddressLike,
      _uniswapV2Router: AddressLike,
      _signer: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyExactIn"
  ): TypedContractMethod<
    [_token: AddressLike, _amountOutMin: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "buyExactOut"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _tokenAmount: BigNumberish,
      _maxCollateralAmount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createMoonShotToken"
  ): TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _nonce: BigNumberish,
      _signature: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createMoonShotTokenAndBuy"
  ): TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _nonce: BigNumberish,
      _tokenAmountMin: BigNumberish,
      _signature: BytesLike
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sellExactIn"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _tokenAmount: BigNumberish,
      _amountCollateralMin: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sellExactOut"
  ): TypedContractMethod<
    [
      _token: AddressLike,
      _tokenAmountMax: BigNumberish,
      _amountCollateral: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setConfig"
  ): TypedContractMethod<
    [
      _totalSupply: BigNumberish,
      _virtualTokenReserves: BigNumberish,
      _virtualCollateralReserves: BigNumberish,
      _feeBasisPoints: BigNumberish,
      _dexFeeBasisPoints: BigNumberish,
      _migrationFeeFixed: BigNumberish,
      _mcUpperLimit: BigNumberish,
      _mcLowerLimit: BigNumberish,
      _treasury: AddressLike,
      _dexTreasury: AddressLike,
      _uniswapV2Router: AddressLike,
      _signer: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BuyExactIn"
  ): TypedContractEvent<
    BuyExactInEvent.InputTuple,
    BuyExactInEvent.OutputTuple,
    BuyExactInEvent.OutputObject
  >;
  getEvent(
    key: "BuyExactOut"
  ): TypedContractEvent<
    BuyExactOutEvent.InputTuple,
    BuyExactOutEvent.OutputTuple,
    BuyExactOutEvent.OutputObject
  >;
  getEvent(
    key: "MarketcapReached"
  ): TypedContractEvent<
    MarketcapReachedEvent.InputTuple,
    MarketcapReachedEvent.OutputTuple,
    MarketcapReachedEvent.OutputObject
  >;
  getEvent(
    key: "Migrated"
  ): TypedContractEvent<
    MigratedEvent.InputTuple,
    MigratedEvent.OutputTuple,
    MigratedEvent.OutputObject
  >;
  getEvent(
    key: "NewMoonShotToken"
  ): TypedContractEvent<
    NewMoonShotTokenEvent.InputTuple,
    NewMoonShotTokenEvent.OutputTuple,
    NewMoonShotTokenEvent.OutputObject
  >;
  getEvent(
    key: "NewMoonShotTokenAndBuy"
  ): TypedContractEvent<
    NewMoonShotTokenAndBuyEvent.InputTuple,
    NewMoonShotTokenAndBuyEvent.OutputTuple,
    NewMoonShotTokenAndBuyEvent.OutputObject
  >;
  getEvent(
    key: "SellExactIn"
  ): TypedContractEvent<
    SellExactInEvent.InputTuple,
    SellExactInEvent.OutputTuple,
    SellExactInEvent.OutputObject
  >;
  getEvent(
    key: "SellExactOut"
  ): TypedContractEvent<
    SellExactOutEvent.InputTuple,
    SellExactOutEvent.OutputTuple,
    SellExactOutEvent.OutputObject
  >;
  getEvent(
    key: "SetConfig"
  ): TypedContractEvent<
    SetConfigEvent.InputTuple,
    SetConfigEvent.OutputTuple,
    SetConfigEvent.OutputObject
  >;

  filters: {
    "BuyExactIn(address,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      BuyExactInEvent.InputTuple,
      BuyExactInEvent.OutputTuple,
      BuyExactInEvent.OutputObject
    >;
    BuyExactIn: TypedContractEvent<
      BuyExactInEvent.InputTuple,
      BuyExactInEvent.OutputTuple,
      BuyExactInEvent.OutputObject
    >;

    "BuyExactOut(address,address,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      BuyExactOutEvent.InputTuple,
      BuyExactOutEvent.OutputTuple,
      BuyExactOutEvent.OutputObject
    >;
    BuyExactOut: TypedContractEvent<
      BuyExactOutEvent.InputTuple,
      BuyExactOutEvent.OutputTuple,
      BuyExactOutEvent.OutputObject
    >;

    "MarketcapReached(address)": TypedContractEvent<
      MarketcapReachedEvent.InputTuple,
      MarketcapReachedEvent.OutputTuple,
      MarketcapReachedEvent.OutputObject
    >;
    MarketcapReached: TypedContractEvent<
      MarketcapReachedEvent.InputTuple,
      MarketcapReachedEvent.OutputTuple,
      MarketcapReachedEvent.OutputObject
    >;

    "Migrated(address,uint256,uint256,uint256,uint256,address)": TypedContractEvent<
      MigratedEvent.InputTuple,
      MigratedEvent.OutputTuple,
      MigratedEvent.OutputObject
    >;
    Migrated: TypedContractEvent<
      MigratedEvent.InputTuple,
      MigratedEvent.OutputTuple,
      MigratedEvent.OutputObject
    >;

    "NewMoonShotToken(address,bytes)": TypedContractEvent<
      NewMoonShotTokenEvent.InputTuple,
      NewMoonShotTokenEvent.OutputTuple,
      NewMoonShotTokenEvent.OutputObject
    >;
    NewMoonShotToken: TypedContractEvent<
      NewMoonShotTokenEvent.InputTuple,
      NewMoonShotTokenEvent.OutputTuple,
      NewMoonShotTokenEvent.OutputObject
    >;

    "NewMoonShotTokenAndBuy(address,bytes,uint256,uint256,uint256,uint256)": TypedContractEvent<
      NewMoonShotTokenAndBuyEvent.InputTuple,
      NewMoonShotTokenAndBuyEvent.OutputTuple,
      NewMoonShotTokenAndBuyEvent.OutputObject
    >;
    NewMoonShotTokenAndBuy: TypedContractEvent<
      NewMoonShotTokenAndBuyEvent.InputTuple,
      NewMoonShotTokenAndBuyEvent.OutputTuple,
      NewMoonShotTokenAndBuyEvent.OutputObject
    >;

    "SellExactIn(address,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      SellExactInEvent.InputTuple,
      SellExactInEvent.OutputTuple,
      SellExactInEvent.OutputObject
    >;
    SellExactIn: TypedContractEvent<
      SellExactInEvent.InputTuple,
      SellExactInEvent.OutputTuple,
      SellExactInEvent.OutputObject
    >;

    "SellExactOut(address,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      SellExactOutEvent.InputTuple,
      SellExactOutEvent.OutputTuple,
      SellExactOutEvent.OutputObject
    >;
    SellExactOut: TypedContractEvent<
      SellExactOutEvent.InputTuple,
      SellExactOutEvent.OutputTuple,
      SellExactOutEvent.OutputObject
    >;

    "SetConfig(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,address)": TypedContractEvent<
      SetConfigEvent.InputTuple,
      SetConfigEvent.OutputTuple,
      SetConfigEvent.OutputObject
    >;
    SetConfig: TypedContractEvent<
      SetConfigEvent.InputTuple,
      SetConfigEvent.OutputTuple,
      SetConfigEvent.OutputObject
    >;
  };
}
